// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id String @id @default(cuid())

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  videos        Video[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Video {
  id            String   @id @default(cuid())
  createdBy     User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById   String
  link          String   @db.VarChar(255)
  numberOfLikes Int      @default(0)
  createdAt     DateTime @default(now())

  comments          Comment[]          @relation("VideoToComment")
  feedbackQuestions FeedbackQuestion[] @relation("VideoToFeedbackQuestion")
}

model Comment {
  id        String   @id @default(cuid())
  text      String   @db.VarChar(255)
  video     Video    @relation("VideoToComment", fields: [videoId], references: [id], onDelete: Cascade)
  videoId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
}

model FeedbackQuestion {
  id       String   @id @default(cuid())
  videoId  String
  question String   @db.VarChar(255)
  answers  Answer[]
  video    Video    @relation("VideoToFeedbackQuestion", fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId]) // Indexing videoId for better performance
}

model Answer {
  id         String           @id @default(cuid())
  question   FeedbackQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  text       String           @db.VarChar(255)
  votes      Int              @default(0)
  createdAt  DateTime         @default(now())
}
